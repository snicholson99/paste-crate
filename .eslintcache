[{"/Users/scott/code/projects/react/paste-crate/src/index.js":"1","/Users/scott/code/projects/react/paste-crate/src/App.js":"2","/Users/scott/code/projects/react/paste-crate/src/components/Clock/index.js":"3","/Users/scott/code/projects/react/paste-crate/src/components/Note/index.js":"4"},{"size":219,"mtime":1607807762418,"results":"5","hashOfConfig":"6"},{"size":2893,"mtime":1607876051575,"results":"7","hashOfConfig":"6"},{"size":641,"mtime":1607807952173,"results":"8","hashOfConfig":"6"},{"size":1444,"mtime":1607875981450,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1rnse5b",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/scott/code/projects/react/paste-crate/src/index.js",[],["21","22"],"/Users/scott/code/projects/react/paste-crate/src/App.js",["23"],"import { Component } from 'react';\nimport { scroller } from \"react-scroll\";\n\nimport Clock from './components/Clock';\nimport Note from './components/Note';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      noteList: localStorage.getItem(\"noteList\") ? JSON.parse(localStorage.getItem(\"noteList\")) : [],\n    }\n  }\n  \n  onNoteChange = (value, noteIndex) => {\n    this.setState(currentState => {\n      let noteList = currentState.noteList;\n      noteList[noteIndex] = value;\n      return {\n        noteList,\n      };\n    }, () => {\n      // update note in local storage\n      localStorage.setItem(\"noteList\", JSON.stringify(this.state.noteList));\n    })\n  };\n\n  createNewNote = () => {\n    this.setState({ noteList: [...this.state.noteList, ''] }, () => {\n      // update notes in local storage\n      localStorage.setItem(\"noteList\", JSON.stringify(this.state.noteList));\n      // scroller.scrollTo(`note-${this.state.noteList.length - 1}`, {\n      //   duration: 1,\n      //   delay: 0,\n      //   smooth: \"easeInOutQuart\",\n      // });\n    })\n    // this.setState(currentState => {\n    //   let noteList = currentState.noteList;\n    //   noteList.push(\"\");\n    //   console.log(noteList);\n    //   return {\n    //     noteList,\n    //   };\n    // }, () => {\n    //   console.log(this.state.noteList.length);\n    //   // update notes in local storage\n    //   localStorage.setItem(\"noteList\", JSON.stringify(this.state.noteList));\n    //   // scroller.scrollTo(`note-${this.state.noteList.length - 1}`, {\n    //   //   duration: 1,\n    //   //   delay: 0,\n    //   //   smooth: \"easeInOutQuart\",\n    //   // });\n    // })\n  }\n\n  deleteNote = (noteIndex) => {\n    let confirmed = window.confirm(\"Are you sure you want to delete this note?\");\n    if (confirmed) {\n      this.setState(currentState => {\n        let noteList = currentState.noteList;\n        noteList.splice(noteIndex);\n        return {\n          noteList,\n        };\n      }, () => {\n        // update notes in local storage\n        localStorage.setItem(\"noteList\", JSON.stringify(this.state.noteList));\n      });\n    }\n  }\n\n\n  render () {\n    const { noteList } = this.state;\n    const { onNoteChange, createNewNote, deleteNote } = this;\n    return (\n      <div className=\"App\">\n        <header>\n          <Clock />\n        </header>\n        <section className=\"section\">\n          {noteList.map((note, i) => (\n            <div key={i} className=\"note-container\">\n              <Note\n                noteIndex={i}\n                note={note}\n                onNoteChange={onNoteChange}\n                deleteNote={deleteNote}\n              />\n            </div>\n          ))}\n        </section>\n        <div className=\"new-note button\" onClick={createNewNote}>\n          <i className=\"fas fa-plus\"></i>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/scott/code/projects/react/paste-crate/src/components/Clock/index.js",[],"/Users/scott/code/projects/react/paste-crate/src/components/Note/index.js",["24"],"import React, { Component } from \"react\";\n\nimport \"./style.css\";\n\nclass Note extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isShowingCopiedText: false,\n    };\n  }\n\n  onCopyToClipboardClick = () => {\n    navigator.clipboard.writeText(this.props.note);\n    this.setState({ isShowingCopiedText: true }, () => {\n      setTimeout(() => {\n        this.setState({ isShowingCopiedText: false });\n      }, 1500);\n    });\n  }\n\n  render() {\n    const { onCopyToClipboardClick } = this;\n    const { note, onNoteChange, noteIndex, deleteNote } = this.props;\n    const { isShowingCopiedText } = this.state;\n    return (\n      <div className=\"note\">\n        <textarea\n          type=\"text\"\n          onChange={(e) => onNoteChange(e.target.value, noteIndex)}\n          value={note}\n          placeholder=\"Note\"\n          autoComplete=\"off\"\n          className={`note-input note-${noteIndex}`}\n          name={`note-${noteIndex}`}\n        />\n        <div className=\"note-options-flex-container\">\n          <div className=\"note-copy-container\" onClick={onCopyToClipboardClick}>\n            <p className=\"note-copy-label\">{isShowingCopiedText ? \"Copied!\" : \"Copy to Clipboard\"}</p>\n            <i className=\"note-copy-icon fas fa-clipboard\"></i>\n          </div>\n          {/* <p onClick={() => deleteNote(noteIndex)}>Delete</p> */}\n        </div>\n        <div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Note;",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":2,"column":10,"nodeType":"31","messageId":"32","endLine":2,"endColumn":18},{"ruleId":"29","severity":1,"message":"33","line":24,"column":44,"nodeType":"31","messageId":"32","endLine":24,"endColumn":54},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'scroller' is defined but never used.","Identifier","unusedVar","'deleteNote' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]